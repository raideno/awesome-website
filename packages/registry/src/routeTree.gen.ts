/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExploreIndexRouteImport } from './routes/explore/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as DashboardPaymentIndexRouteImport } from './routes/dashboard/payment/index'
import { Route as DashboardNewIndexRouteImport } from './routes/dashboard/new/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreIndexRoute = ExploreIndexRouteImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardPaymentIndexRoute = DashboardPaymentIndexRouteImport.update({
  id: '/dashboard/payment/',
  path: '/dashboard/payment/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardNewIndexRoute = DashboardNewIndexRouteImport.update({
  id: '/dashboard/new/',
  path: '/dashboard/new/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/dashboard/new': typeof DashboardNewIndexRoute
  '/dashboard/payment': typeof DashboardPaymentIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/explore': typeof ExploreIndexRoute
  '/dashboard/new': typeof DashboardNewIndexRoute
  '/dashboard/payment': typeof DashboardPaymentIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/': typeof AuthIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/explore/': typeof ExploreIndexRoute
  '/dashboard/new/': typeof DashboardNewIndexRoute
  '/dashboard/payment/': typeof DashboardPaymentIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/explore'
    | '/dashboard/new'
    | '/dashboard/payment'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/explore'
    | '/dashboard/new'
    | '/dashboard/payment'
  id:
    | '__root__'
    | '/'
    | '/auth/'
    | '/dashboard/'
    | '/explore/'
    | '/dashboard/new/'
    | '/dashboard/payment/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthIndexRoute: typeof AuthIndexRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  DashboardNewIndexRoute: typeof DashboardNewIndexRoute
  DashboardPaymentIndexRoute: typeof DashboardPaymentIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/payment/': {
      id: '/dashboard/payment/'
      path: '/dashboard/payment'
      fullPath: '/dashboard/payment'
      preLoaderRoute: typeof DashboardPaymentIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/new/': {
      id: '/dashboard/new/'
      path: '/dashboard/new'
      fullPath: '/dashboard/new'
      preLoaderRoute: typeof DashboardNewIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthIndexRoute: AuthIndexRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  DashboardNewIndexRoute: DashboardNewIndexRoute,
  DashboardPaymentIndexRoute: DashboardPaymentIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
